#!/usr/bin/env groovy
import hudson.model.*
import hudson.EnvVars
import groovy.json.JsonSlurperClassic
import groovy.json.JsonBuilder
import groovy.json.JsonOutput
import java.net.URL

echo "This Build is EdsFixGeneratePipelineOct2020 Version 01.00.0000"
echo "Date it was created: Oct 19, 2020"
echo "Date it was last updated: Oct 19, 2020"
echo "The ISPW Stream being used is: ${ISPW_Stream}"
echo "The ISPW Application being used is: ${ISPW_Application}"
echo "The ISPW Container being used is: ${ISPW_Container}"
echo "The ISPW Level being used is: ${ISPW_Level}"
echo "The ISPW SetID being used is: ${ISPW_SetId}"
echo "The ISPW Release being used is: ${ISPW_Release}"
echo "The ISPW Event being used is: ${ISPW_Event}"

//Compuware Envirnoment to connect
String HCI_Connection     = "cwcc:16196"
String CES_Connection     = "cwcc:2020"       

// Jenkins credential ID and CES Personal Access token to be used for mainframe access
String Jenkins_Id        = "hdaelg0"      // ID that was created in Jenkins containing mainframe CWCC ID/PW
String Jenkins_CES       = "hdaelg0ces"   // A secret text credential containing your CES token
String CES_Token         = "8ade625f-07a2-4be6-a9f8-0653c5969d07"   // Ed's CES Token using hdaelg0

// Github specifications
String github_credentials = "SharkWorks1_Github" // ID that was created in Jenkins containing Ed's github ID/PW
//String github_url         = "https://github.com/SharkWorks1/EdsFixPipeline.git" // The github URL where your TTT test is stored Old 07/27/2020
String github_url         = "https://github.com/eddevops0007/TopazForTotalTest.git" // The github URL where your TTT test is stored

// ISPW Levels and container to be used by the promote/deploy/generate/regress operations
String ISPW_ContainerType = "assignments"   // Valid values are assignments or releases
// String ISPW_Container     = "BAW1000040"    // The container where your items are in ISPW
// String ISPW_Stream        = "FTSDEMO"       // Your ISPW stream
// String ISPW_Application   = "BAW1"          // Your ISPW application
String ISPW_RuntimeConfig = "ISPW"          // ISPW or ISPT
//String ISPW_Dev_Level     = "DEV1"          // The name of your DEV level
//String ISPW_Stg_Level     = "QA1"           // The name of the next level up from your DEV level
//String ISPW_Release       = "SKO19  "       // The ISPW release ID used in XLR

// Directory for tests that are downloaded to the jenkins workspace
//String TTT_Project        = "EdsFixPipeline"  // The name of your TTT project  Old 07/27/2020
String TTT_Project        = "CWXTCOB_GIT_DEMO0001"  // The name of your TTT project

// Total Test JCL and Scenario/Testsuite used in CI process
String TTT_TestPackage    = "CWXTCOB_Scenario" // The filename name of your TTT Scenario
String TTT_Sonar          = "${TTT_Project}_${TTT_TestPackage}.sonar" // The input file to SonarQube from TTT 
String TTT_PackageType    = ".testscenario"    // The suffix of your TTT Scenario
String TTT_Jcl            = "Runner.jcl"       // The name of the JCL file
String CC_repository      = "SALESSUP.ELG1.DEV1.CODE.COVERAGE" // The DSN of your code coverage repository

// SonarQube ID used for both project key and project name
String SQ_Project         = "Eds_FIX_Generate_Pipeline_V2" // Your SonarQube project name

// XL Release values
//String XLR_Template       = "Roland/Release from Jenkins (Roland)" // XL Release template 
//String XLR_User	          = "Xuser05"	// XLR Credentials

stage("Download Source from ISPW")
{
    // Choose the folllowing from the Jenkins Snippet Generator:
    //      checkout: Check out from version control
    //          SCM : Choose ISPW Repository

    node{
        //Download the source
        checkout([$class: 'IspwConfiguration', 
        componentType: 'COB, COPY',                             //Retrieve only cobol code and copybooks
        connectionId: '91bae501-8b4d-4155-909d-2ad5aa9f3131',   //This is the ID for CWCC's HCI
        credentialsId: "${Jenkins_Id}",  
        levelOption: '0',                                       //0-selected level only 1-first found and above
        serverApplication: "${ISPW_Application}", 
        serverConfig: "${ISPW_RuntimeConfig}", 
        serverLevel: "${ISPW_Level}", 
        ispwDownloadIncl: true,                                 // Download Includes (Copybooks)
        serverStream: "${ISPW_Stream}"])
    }

} 

// stage("Download Tests from Github")
// {
//     node{

//        //Download the test from github
//         checkout changelog: false, 
//            poll: false, 
//            scm: [$class: 'GitSCM', 
//            branches: [[name: '*/master']], 
//            doGenerateSubmoduleConfigurations: false, 
//            extensions: [], 
//            submoduleCfg: [], 
//            userRemoteConfigs: 
//               [
//               url: github_url]]

//     }
// }

stage("Downlaod Topaz Total Test from Github")
{
      //Download the test from github
    node{
        checkout([$class: 'GitSCM', 
        branches: [[name: '*/master']], 
        doGenerateSubmoduleConfigurations: false, 
        extensions: [], 
        submoduleCfg: [], 
        userRemoteConfigs: [[url: 'https://github.com/eddevops0007/TopazForTotalTest.git']]])
    }
}

stage("Run Total Tests")
{
    node{
        // Run Total Test Jenkins Plugin
            totaltest credentialsId: 'hdaelg0', 
            environmentId: '5b508b8a787be73b59238d38', 
            folderPath: "C:/Users/pfhsxk0/.jenkins/workspace/EdsFixGeneratePipelineOct2020/TotalTest - ISPW - Git/CWXTCOB Including Called Programs/Functional Test/Scenarios/CWXTCOB.context", 
            recursive: true, 
            selectProgramsOption: true, 
            serverUrl: 'http://cwcc:2020'
                    
        // Process the Total Test result files into Jenkins
        junit keepLongStdio: true, testResults: 'TTTUnit/*.xml'
    }
}

stage("Retrieve Code Coverage Data")
{
    // This was copied from my EdsFixGeneratePipeline
    node{
        // Retrieve code coverage data
        string sources="${ISPW_Application}\\MF_Source"
        def ccproperties   = 'cc.sources=' + sources + 
        '\rcc.repos=' + CC_repository + 
        '\rcc.system=' + TTT_Project + 
        '\rcc.test=' + BUILD_DISPLAY_NAME + 
        '\rcc.ddio.overrides='
        step([$class: 'CodeCoverageBuilder',
        analysisProperties: ccproperties,
            analysisPropertiesPath: '',
            connectionId: '91bae501-8b4d-4155-909d-2ad5aa9f3131',
            credentialsId: Jenkins_Id])
    }
}

stage("SonarQube Analysis") 
{
    node{
        // Requires SonarQube Scanner 2.8+
        def scannerHome = tool 'scanner';
        withSonarQubeEnv('localhost') 
        {
            // Run SonarQube Scanner 
            def SQ_Tests                = " -Dsonar.tests=${TTT_Project} -Dsonar.testExecutionReportPaths=TTTSonar/${TTT_Sonar}.xml"
            def SQ_ProjectKey           = " -Dsonar.projectKey=${SQ_Project} -Dsonar.projectName=${SQ_Project} -Dsonar.projectVersion=1.0"
            def SQ_Source               = " -Dsonar.sources=${ISPW_Application}\\MF_Source"
            def SQ_Copybook             = " -Dsonar.cobol.copy.directories=${ISPW_Application}"
            def SQ_Cobol_conf           = " -Dsonar.cobol.file.suffixes=cbl,testsuite,testscenario,stub -Dsonar.cobol.copy.suffixes=cpy -Dsonar.sourceEncoding=UTF-8"
            bat "${scannerHome}/bin/sonar-scanner" + SQ_Tests + SQ_ProjectKey + SQ_Source + SQ_Copybook + SQ_Cobol_conf
        }
    }
}
stage("Check Quality Gate")
{
    node{ 
        timeout(time: 4, unit: 'MINUTES') {
            // Wait for webhook call back from SonarQube
            def qg = waitForQualityGate()
            if (qg.status != 'OK')
            {
                echo "Pipeline aborted due to quality gate failure: ${qg.status}"
                def assignment = "${ISPW_Container}"
                echo "Assignment that is being regressed is: "
                echo assignment
                error "Exiting Pipeline"
                // If the quality gate is anything other than Green, regress the promoted code
               // Define variables to be used to call ISPW
            //    def ces
            //    def container
            //    def ces          = "${Jenkins_CES}"
            //    String ispwRequestBdy = /assignmentId=${ISPW_Container}
            //       level=${ISPW_Stg_Level} 
            //       runtimeConfiguration=${ISPW_RuntimeConfig} 
            //       events.name=Completed events.body=Regressed
            //       events.httpHeaders=Jenkins-Crumb:no-crumb
            //       events.credentials=admin:library/

            //    // Call ISPW Operation
            //    ispwOperation connectionId: 'de2ad7c3-e924-4dc2-84d5-d0c3afd3e756',
            //    credentialsId: ces,
            //    ispwAction: 'RegressAssignment',
            //    ispwRequestBody: ispwRequestBdy
                
            //     error "Exiting Pipeline"
            }
            else{
                emailext body: 'Your Assignment: ${ISPW_Container} Passed the Quality Gate', 
                subject: 'Your Assignment: ${ISPW_Container} Passed The Quality Gate', 
                to: 'ed.gannaway@compuware.com'
                    
                echo "Quality Gate status is: {${qg.status}"
            }
        }   
    }
}
// stage("Run Total Test")
// {
//     node{

//         totaltest clearCodeCoverage: true, 
//         collectCCRepository: 'HDAELG0.CODE.COVERAGE', 
//         collectCCSystem: 'TEST1', 
//         collectCCTestID: 'TEST1', 
//         collectCodeCoverage: true, 
//         credentialsId: 'hdaelg0', 
//         environmentId: '5b5f2a71787be73b59238d7b', 
//         folderPath: '', 
//         recursive: true, 
//         selectProgramsOption: true, 
//         serverUrl: 'http://cwcc.compuware.com:2020'
//     }
// }